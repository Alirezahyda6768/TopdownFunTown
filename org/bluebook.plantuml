@startuml
skinparam monochrome false
skinparam handwritten false

'skinparam backgroundColor #EEEBDC
skinparam classFontColor Black
skinparam classFontSize 18
skinparam classAttributeIconSize 0

skinparam abstract {
	BackgroundColor blue
	ArrowColor SeaGreen
	BorderColor pink
}

skinparam class {
	'BackgroundColor white
	'ArrowColor SeaGreen
	'BorderColor blue
}

title Bluebook game engine

package com.bluebook {
package javafx{
    class FXMLController <<Controller>>{
        +initializable():void
        -GameEngine: engine
    }
}

package engine {
    class GameEngine{
        {static}+getInstance():GameEngine
        ..
        -Renderer: render
        -Thread: updateThread
        +update():void
    }

    abstract class GameApplication <<Application>>{
        ~onLoad():void
    }
}

package audio {

    class AudioPlayer{
        +PlayOnce(Media audio):void
        +PlayLoop(Media adio):void
    }
    class AudioLoader{
        +LoadAudio(String path):Media
    }
}

package threads{
    class UpdateThread <<Runnable>>{
        +Start():void
    }
}

package  graphics{
    class SpriteLoader{
        +LoadSprite(String path):Sprite
        +LoadDir(String pathToDIr):HashMap<String, Sprite>()
    }

    class Sprite{
        -Image: img
        +draw(GraphicsContext gc, Vec2 position, Vec2 direction):void
        +draw(GraphicsContext gc, Vec2 position):void
    }

    class AnimationSprite <<Sprite>>{
        -Image[]: animation
        -double: length
    }

}

package renderer {

    class CanvasRenderer{
        {static}+getInstance():CanvasRenderer
        ..
        -ArrayList<RenderLayer>: drawables
        +AddGameObject(GameObject in, RenderLayer rl):void
        +DrawAll():void
    }

    class RenderLayer{
        -ArrayList<GameObjects>: drawables
        -String: name
        +drawAll():void
        +addGameObject(GameObject in):void
        +removeGameObject(GameObject in):void
    }

}

package util{

    class Transform{
        ~Vec2: position
        ~Vec2: rotation
        ~Vec2: size
        ~Transform: parent
    }

    abstract GameObject{
        Objects to be drawn on screen
        ..
        ~Transform: transform
        +draw(GraphicsContext gc):void
    }

    class Vec2{
        -X : double
        -Y : double
        +getLength():double
        +getAngleInDegrees():double
        +getAngleInRadians():double
    }
}

package input{
    class Input{
        +isPressed(KeyCode key):boolean
        +isMouseButton0Pressed():boolean
        +isMouseButton1Pressed():boolean
        +getMousePosition():Vec2
    }
}

package physics{
    class Collider{
        -rect : Rectangle
        -gameObject : GameObject
        +setOnCollideListener(OnCollideListener listener):void
    }
    class HitDetectionHandler{
        {static}+getInstance():HitDetectionHandler
        ..
        ~updatePosition():void
        ~lookForCollision():void
        +addCollider(Collider col):void
        +removeCollider(Collider col):void
    }
    class CollisionThread <<Runnable>>{
        +run():void
    }
    package listeners{
       interface OnCollisionListener{
            +OnCollision(Collider other):void
       }
    }

    class  QuadTree{
        +insert(GameObject go):void
        +draw(GraphicsContext gc):void
        +query(Rectangle rect):ArrayList<GameObject>
    }
}

' assoc
GameObject -RIGHT-> Transform
CollisionThread --> HitDetectionHandler
HitDetectionHandler --{ Collider
HitDetectionHandler --> QuadTree
QuadTree --{ Collider
Collider <-RIGHT-> GameObject
Collider --> OnCollisionListener
GameObject --> Vec2
GameObject <--> Sprite
SpriteLoader ..> Sprite
SpriteLoader .LEFT.> AnimationSprite
AudioLoader ..>  AudioPlayer
AudioPlayer -UP-> GameObject
GameApplication <-- Input
GameApplication --> FXMLController
GameEngine -RIGHT-> CollisionThread
GameEngine <--> UpdateThread
GameEngine --{ GameObject
RenderLayer -DOWN-{ GameObject
OnCollisionListener <.RIGHT.> GameObject
AnimationSprite -DOWN-|> Sprite
RenderLayer }-- CanvasRenderer
GameEngine -DOWN-> CanvasRenderer

/'

CollisionThread -[hidden]UP->HitDetectionHandler
FXMLController -[hidden]DOWN-> UpdateThread
RenderLayer -[hidden]DOWN-> input
GameEngine -[hidden]DOWN-> RenderLayer
Input -[hidden]LEFT-> FXMLController
GameObject -[hidden]LEFT-> FXMLController
UpdateThread -[hidden]RIGHT-> Sprite
Collider -[hidden]RIGHT-> RenderLayer
'/



@enduml
